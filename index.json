[{"categories":["mobile security","discussion"],"contents":"We had a lot of fun discussing the latest mobile app security topics from the eyes of people that build secure apps and help others to build secure apps: iOS14 privacy features, security.plist, and real-life cases like \u0026ldquo;Imagine you\u0026rsquo;re app developer and you receive email claiming someone has found security issue. What will you do?\u0026quot;.\nLive Roundtable About Mobile App Security at Swift Heroes 2020 Digital.\nFeaturing ‚ú®  Julia Vashchenko, macOS/iOS Engineer, MacPaw Julia Potapenko, security software engineer, Cossack Labs Anastasiia Voitova, head of customer solutions, security software engineer, Cossack Labs  Watch üì∫   ","permalink":"https://examplesite.com/discussions/mobile-security-roundatable-swift-heroes-2020/","tags":["mobile security"],"title":"Mobile app security roundtable with Anastasiia Voitova, Julia Potapenko and Julia Vashchenko"},{"categories":["cryptography","discussion"],"contents":"We\u0026rsquo;re speaking about cryptography and explain why base64 is our favourite cipher!\nAmong other questions we discuss:\n is crypto a life-style? is it okay to be into crypto without having crypto background? how to select proper TLS suite? post-quantum crypto: should we care? crypto-coding mistakes we\u0026rsquo;ve seen regulations, e2ee, lattice, and all the things.  Live Crypto Ask Me Anything at OPCDE 2020.\nFeaturing ‚ú®  Matt Suiche, OPCDE founder and host. Ruslan Kiyanchuk, a real cryptographer. Mark Carney, a real mathematician. Anastasiia Voitova, just a software engineer.  Watch üì∫   ","permalink":"https://examplesite.com/discussions/crypto-ama-opcde-2020/","tags":["cryptography"],"title":"Crypto AMA with Anastasiia Voitova, Ruslan Kiyanchuk and Mark Carney"},{"categories":["cryptography","talk"],"contents":"We‚Äôll talk about ‚Äúboring crypto‚Äù: why developers shouldn‚Äôt spend time learning all the details of crypto-algorithms (or invent new ones). How to avoid typical crypto-mistakes when all you need is to protect data at rest or in motion. There are enough ready-to-use cryptographic libraries and tools for everyone.\n   Click to read slides.\nWatch üì∫    Click to read slides.\nPresented at ‚ú®  OWASP Chapters All Day  ","permalink":"https://examplesite.com/talks/use-crypto-dont-learn-it/","tags":["cryptography","boring crypto","crypto engineering"],"title":"Use Cryptography; Don‚Äôt Learn It"},{"categories":["software architecture","talk"],"contents":"Maintaining cross-platform cryptographic library is a journey full of unexpected bugs, language-specific hacks, difficult decisions and endless struggle to make developer-facing APIs easy-to-use and hard-to-misuse.\nAs developers, what do we want from using cryptographic tools? They should be easy-to-use and hard-to-misuse, cover complete use-cases instead of providing raw crypto-primitives, support language-specific style, work in the same way on numerous platforms and languages. Basically, we want less stress and more work done.\n   Click to read slides.\nBut is it so easy to maintain cross-platform crypto library?\nHow to simplify complex crypto concepts into simple encrypt(msg, key) and decrypt(data, key) functions? How to provide a unified API for 12 languages, when some of them are strongly-typed and the other one is javascript? Secure by default: what design choices should be made to protect from misuse. Multi-platformness: how to make sure that message encrypted using Ruby on x64 Ubuntu 18.04 will be successfully decrypted on iOS12 on iPhone armv7s? Testing wildness: static analyzers, fuzzing, unit tests, integration tests. Docs: developers copy-paste from readme anyway, how to make sure that they copy-paste correct things.\nI\u0026rsquo;ll describe the 4yrs experience on maintaining multi-platform open source library Themis: from API design to language-specific hacks.\nBonus questions:  what maintainers completely forget about: the biggest fail reason for users. what is faster in Go: calling OpenSSL via c-Go interop or using native Go crypto primitives? how to deal with multi-platformness, if BoringSSL for iOS doesn\u0026rsquo;t support AES XTS? epic bug with iOS-Android compatibility, which appears to be a sad story about size_t. switching cryptographic backends for fun and profit: switching between BoringSSL, OpenSSL, LibreSSL, libsodium and CommonCrypto, and governmental crypto standards of some countries, leaving the same high-level API.  Key takeaways:  cryptography is easy, but \u0026ldquo;secure by default\u0026rdquo; APIs are hard; never agree to support multi-platform libs; each language has unique hacks and typical mistakes, deal with it.  This talk is useful for people that believe that perfect crypto lib is a C lib with 1-page readme :)\nWatch üì∫    Click to read slides.\nPresented at ‚ú®  BlackAlpsYverdon-les-Bains, Switzerland, 7-8 November 2019  ","permalink":"https://examplesite.com/talks/maintaining-crypto-lib-for-12languages/","tags":["software architecture","boring crypto","cryptography","open source","themis"],"title":"Maintaining cryptographic library for 12 languages"},{"categories":["mobile","talk"],"contents":"The real case about Bear note taking the app that decided to implement convenient note encryption and note locking for their existing user base. But finding a balance between usability, security and mobile platforms\u0026rsquo; restrictions is complicated.\nWe start with the security design scheme, then select the proper encryption library, then implement the flow, and prepare for incidents. Now ‚Äî think about it ‚Äî cryptography is only chapter 3 in OWASP MASVS (8 chapters in general). Even the best cryptography will fail if basic security controls are badly implemented.\n   Click to read slides.\nPoints we cover  the difference between \u0026ldquo;locking\u0026rdquo; and \u0026ldquo;encrypting\u0026rdquo;, the difference between a password and encryption key, how to sync passwords between devices, what exactly to store in keychain/keystore, how to use proper cryptography (AES CBC or AES GCM, random salt? IV? padding? what a hell is this mess), how to use biometrics (we don‚Äôt want to bother user, let‚Äôs use biometric keychain, but what if users will change their fingerprints ‚Äî shall we invalidate all passwords?), updating encryption version (imagine, vulnerability is discovered in our library or app ‚Äî how to update cipher, and softly migrate users to the new cipher, if users don‚Äôt even have a clue that encryption was versioned).  In the end, this is only one simple JIRA ticket \u0026ldquo;let\u0026rsquo;s encrypt the notes\u0026rdquo; from the eyes of security software engineer :)\nRead a technical blogpost \u0026ldquo;Implementing End-to-end Encryption in Bear App\u0026rdquo; about details of implementation.\nWatch ENG üì∫    Click to read slides.\nWatch RU üì∫    Click to read slides.\nPresented at ‚ú®   FrenchKitParis, France, 7-8 October 2019\n  RSConfMinsk, Belarus, 9-11 August 2019\n  CocoaHeads Kyiv conferenceKyiv, Ukraine, 28 July 2019\n  ","permalink":"https://examplesite.com/talks/10-lines-of-encryption/","tags":["end-to-end encryption","cryptography","mobile","themis","software architecture"],"title":"10 lines of encryption, 1500 lines of key management"},{"categories":["talk","software architecture"],"contents":"It comes to no surprise that any micro-services, any security controls you use to build applications ‚Äì will eventually be broken (or fail). Under certain pressure, some components will fail together.\nThe question is ‚Äì how do we build our systems in a way that security incidents won\u0026rsquo;t happen even if some components fail. And the data leaks won\u0026rsquo;t occur even if attacks are successful.\n\u0026ldquo;Defense in depth\u0026rdquo; is a security engineering pattern, that suggests building an independent set of security controls aimed at mitigating more risks even if the attacker crosses the outer perimeter. During the talk, we will model threats and risks for the modern distributed application, and improve it by building multiple lines of defence. We will overview high-level patterns and exact tools from the security engineering world and explain them to the modern web devs :)\n  Read highlights in \u0026ldquo;defense-in-depth\u0026rdquo; blogpost.\n  Read or watch talk at SkillsCast._\n  Watch EN üì∫    Click to read slides.\nWatch RU üì∫    Click to read slides.\nPresented at ‚ú®   SwampUPSan Francisco, US, 17-19 June 2019\n  muConLondon, UK, 29-31 May 2019\n  InfoShareGdansk, Poland, 8-9 May 2019\n  JSFest KyivKyiv, Ukraine, 5-6 April 2019\n  ","permalink":"https://examplesite.com/talks/defense-in-depth-data-2019/","tags":["security","software architecture","application level encryption"],"title":"Defense in depth: trench warfare principles for building secure distributed applications"},{"categories":["talk","mobile"],"contents":"Apple made many announcements on WWDC 2019 about cryptography, cybersecurity and privacy. I highlighted important changes for developers ‚Äì including new CryptoKit framework, data privacy regulations, new app permissions.\n  Read highlights in my post on WWDC by Sundell.\n  Listen to the interview with John Sundell where we discuss all the same things :)\n     Click to read slides.\nWatch RU üì∫    Click to read slides.\nPresented at ‚ú®  CocoaFriday Kyiv meetupKyiv, Ukraine, 14 June 2019  ","permalink":"https://examplesite.com/talks/security-wwdc-2019/","tags":["cryptography","mobile","privacy","security","Apple"],"title":"Security, privacy and cryptography at WWDC19"},{"categories":["software architecture","talk"],"contents":"Modern apps are multi-components, and most data leaks are caused by poor architectural decisions.\nWe will take a deep look into data lifecycle, risk, trust and how they affect security architecture, encryption, and key management techniques. We will illustrate typical SDL patterns: narrowing trust, monitoring intrusions, zero knowledge architectures, distributing trust.\nThe goal of the talk is to give a general thinking framework and enough ideas about tools for senior engineers to plan their solutions securely, regarding sensitive data contained within.\n   Click to read slides.\nPoints we cover  what is sensitive data life-cycle,  how to build trust model for your app,  what are typical trust patterns,  how to select proper security controls based on real-world risks.  Watch ENG üì∫    Click to read slides.\nPresented at ‚ú®   DevExperience 19Iasi, Romania, 19 April 2019\n  Javazone 18Oslo, Norway, 12-13 September 2018\n  ","permalink":"https://examplesite.com/talks/protecting-data-in-multi-component-systems/","tags":["security","product engineering","software architecture"],"title":"Protecting sensitive data in modern multi-component systems"},{"categories":["post"],"contents":"The essay I wrote for De Programmatica Ipsum magazine about secure software development and the mindset gap between the world of product makers and the world of security people. Originally posted at 3 Dec 2018.\n Does not it feel like the world is on fire?\nSecurity talks and blog posts usually start with horror stories ‚Äì for instance ‚Äúapplication security is important because without it you will be hacked here and now.‚Äù But I have had enough of this doom and gloom on my Twitter feed and mailbox, and would like to talk about something else.\nOnly those who (happily) live under a rock may have missed the latest news. One company has a critical security bug, another has leaked emails and passwords to millions of user accounts (yours and mine included,) and another will be fined millions of Euros due to a GDPR violation.\nI do not want to add to the existential dread, but I would love to discuss the problems behind creating secure software.\nWhy Do We Care? Thirty years ago, before the Internet became widespread, only military and governmental services were interested in data protection. Back then it was as complicated to gather and analyze data as it was to steal it. Today more than 1300 new apps emerge in app stores every day; most of them collecting, processing, and transfering data ‚Äì risking its confidentiality and integrity at each step.\nLet‚Äôs put on our app developer‚Äôs hat.\nRisking our customers‚Äô data, those who trust us to handle it with great care, is more than a question of it being ‚Äúgood or bad.‚Äù Why? Because of the lawsuits, fines, and other more terrifying consequences that may loom over the business that we build, or are employed by. Competitors or attackers will be thrilled to discover you‚Äôve left them an entryway, too.\nProtecting users‚Äô data and privacy is not only a sign of product quality.\nIt is also a way of showing respect for those users and their rights. One could argue that data security has a ‚Äúa negative value‚Äù, meaning that it requires a lot of effort to implement, it‚Äôs hard to measure, it‚Äôs never ‚Äúcompletely‚Äù done, and it doesn‚Äôt bring money to the business. However, while ‚Äúpositive security‚Äù is very hard to define, the lack of regular ‚Äúnegative‚Äù security is something that companies cash out for in terms of fines, which may even lead to the death of a business.\nNo company is ‚Äútoo small‚Äù to think about security.\n‚ÄúOh, we won‚Äôt be hacked because our application is small and not very popular‚Äù is a poor argument. I‚Äôm sure the owner of a Winnipeg mattress store thought so too ‚Äì before the company was forced to pay a criminal who shut down their servers, stopping all the sales.\nA Bit Of Background Do not you have a feeling that developers care more about smooth animations than about data protection? I think the reason might be the gap between the world of product makers and the world of security people. The gap in their skills, competence, and mindset.\nI came to work in the area of security and cryptography after leaving the shiny world of mobile development. I was working in a ‚Äúsoftware boutique‚Äù company, creating iOS applications, and NodeJS or Python-driven backends. I managed to put my hands on several dozens of mobile apps, like chats, online shops, medical platforms that process patients‚Äô data, apps for controlling smart devices, and so on.\nWe mostly worked with startups and small companies, and we didn‚Äôt have a separate role of a solution architect or product engineer. I had a chance to be responsible for the whole mobile architecture, the protocols, and API layers between apps, web and backend, the data storage and synchronization, backups and monitoring, etc.\nNow I am working in a data security company, making software that protects data and prevents leaks, which is designed to be friendlier to developers who are not the from the ‚Äúsecurity planet‚Äù, like my ex-colleagues.\nAs I often say, \u0026ldquo;Cryptography should work everywhere,\u0026quot; and so our open source libraries and tools can be found in small mobile apps, as well as in large country-wide infrastructures.\nEvery day I speak with other software companies who care about data security in their products, and I realized that they need help.\nFrom these interactions, I noticed that most security people have no experience in developing decidedly usable software. On the other hand, most software developers don‚Äôt have skills in security analysis and architecture. While I‚Äôm staying between two worlds, I feel this problem deeply.\nThrowing Hot Potatoes When I ask developers why they don‚Äôt implement basic security-sanity features (like protecting user passwords, limiting access to user data, etc.), I often hear the same answer: ‚ÄúThe manager didn‚Äôt tell us to do it, we don‚Äôt have this task on the board.‚Äù\nImagine having the following conversations with managers again and again:\n‚Äì How things are going with security in your app? ‚Äì We are totally fine, we have smart and competent developers, they handle everything. ‚Äì Does your team have security-related tasks? Do they assess the security risks while planning new features? Do you follow the Secure Development Life Cycle? Do you have an internal blue team? Do you do security audits once in a while? ‚Äì Well\u0026hellip; We don‚Äôt do all of that.. but our QA team does pen-tests!\nIt‚Äôs a great first step when developers try using pen-tests and security checklists.\nHowever, this is a low hanging fruit of ‚Äúlet‚Äôs build and release quickly, developers will try to do their best, and a week before a release we will go through the OWASP checklist and solve the obvious problems.‚Äù In the best-case scenario, the team will write down and solve the critical issues, but people usually only solve the easy things and put off the complicated ones to be implemented in the next releases ‚Äì or, more typically, never.\nBuilding secure software is hard.\nAn attacker has to make just a few correct guesses, while a developer has to take care of a number of things from the very beginning.\nYour system is not secure if you do SSL pinning and store keys in key storage in your app, but use an open MongoDB with default admin password on the backend. Data security works if it covers the system fully, including mobile and web applications, backends, external services, and backups. Solution architects and security team should care and align feature developers and devops.\nThis approach is efficient when a company is not hiding under ‚Äúwe‚Äôre fine‚Äù umbrella.\nSecure Development It is impossible to learn secure development just from reading tutorials.\nMost ‚ÄúBuilding secure chat‚Äù tutorials starts with ‚ÄúLet‚Äôs create a new project‚Äù and end up with the ‚ÄúNow we have encrypted data‚Äù step. Moreover, they use encryption libraries with APIs expecting developers to choose between symmetric cyphers, their mode (ECB vs GCM, huh?), salt and ‚Äúnonce‚Äù, etc.\nMost developers just copy-paste cryptographic code snippets without understanding them. Even if data encryption is done correctly, one needs to design the rest of the application flow, use a different encryption for transferring the data, consider the key management procedures, choose appropriate authentication controls, techniques of monitoring and alerting, and so on.\nAs developers, we are always trying to cut a few corners, are not we?\nI‚Äôve recently discovered a ‚Äúcodeless‚Äù service that ‚Äúprotects‚Äù mobile applications you send it to them. So, imagine, you send a compiled .ipa or .apk and code signing credentials to their site, and they ‚Äúmagically‚Äù protect your app by integrating encryption, SSL pinning, DLP, and obfuscation. Surprisingly, neither managers nor developers are embarrassed. Close-source system that changes your application flow without providing you with a way to see changes, what could possibly go wrong?\nThe illusion of security is much worse than its absence.\nSecure Software Development Lifecycle as a methodology that has existed for many years. It is described in detail as MS SDL (deep and solid) and as OWASP S-SDLC (short and modern). The SSDLC distils common sense from the industry experience of building secure software and prescribes techniques which cover most risks in most cases.\nThe SSDLC consists of several steps and accompanies a typical software development approach (including Agile and XP.)\n Risk evaluation and assessment ‚Äì understanding business and technological risks threatening data of and on which the application operates. Building a threat model ‚Äì what are the typical threats that the application faces? Security roadmap defined according to the most possible threats. Typically, a security roadmap contains data minimization, data protection during storage and transmission, access limitation and monitoring. Secure coding ‚Äì which libraries and tools to use, where to store keys. Using a good encryption library itself won‚Äôt make your app secure. Secure operations ‚Äì infrastructure-level changes that should be done, including procedures of revoking user sessions, updating certificates, patching libraries. Security verification and testing are usually done combining manual and automation tools for continuously testing a code base, including its dependencies, for vulnerabilities. Threat response and recovery ‚Äì the plan and procedures to conduct upon detecting threats. The SSDLC is a continuous process that should start after suspecting any vulnerability or detecting an incident. And it‚Äôs a process, not a single feature to add.  End-to-end Encryption And Marketing How technically difficult you think it is to make end-to-end encrypted applications? Well, it‚Äôs a bit tricky, but not impossible. Cryptography helps to reduce the attack surface and risks and prevents attackers and insiders from reading the data. If a system does not know which data it operates on, this data cannot be stolen easily, right?\nSo why do not we have more E2EE data exchange in modern software? If a company does not have access to its data, it cannot analyze it and use it for advertising. Finding the right balance between missed advertising profits and de-risking actual ownership of this data is tricky, but doable.\nTomorrow Secure software development is far from being a popular practice, so we still need reminders to show us the real consequences of data security. Until good software and secure software become synonymous, there will be fines and losses. So, what exactly should we do tomorrow to improve the security of our software?\nI don‚Äôt have an easy answer for you. Maybe starting to devote time to security as a sign of professionalism ‚Äì similarly to the way we focus on writing maintainable, testable, manageable code, not just code ‚Äúthat works‚Äù?\nCover photo by Nick Boyer on Unsplash.\n2021 update In a nutshell, everything is still the same: bugs everywhere, many companies treat SSDLC like \u0026ldquo;automatic tools and pentests we run after release, and awareness trainings\u0026rdquo; :)\n","permalink":"https://examplesite.com/posts/secure-development-is-dead/","tags":["software architecture","security","ssdlc"],"title":"Secure Development Is Dead, Long Live Secure Development"},{"categories":["mobile","talk"],"contents":"Before we get deep into protocols vulnerabilities: things you should remember designing your app flow from a security point of view.\nThis talk will focus on copybook headings of infosec: what you need to know before exciting stuff like cryptography and AI-assisted incident detection. Like, choice of data you show in the background mode, choice of 3rd party SDKs, which logs we send and where\u0026hellip;\nEven when developers create apps with security in minds, protect user secrets, and don‚Äôt reveal unencrypted data, attackers can find ways to bypass these security measures by exploiting architectural weaknesses and unobvious, yet very simple vulnerabilities. We will talk about all the tiny bits and pieces are necessary to make your app secure against simple attacks way before focusing on the hard things (like crypto).\n   Click to read slides.\nPoints we cover  Handling user secrets with care (showing, storing, logging). Input validation and password rules. Handling transport connection. And some tips and tricks that will confuse attackers.  Watch ENG üì∫ [from UIKonf]    Click to read slides.\nWatch ENG üì∫ [from mDevTalk]    Click to read slides.\nWatch RU üì∫    Click to read slides.\nPresented at ‚ú®   CocoaHeads Kyiv #14Kyiv, Ukraine, 6 October 2018\n  mDevTalk 18Prague Czech Republic, 24 May 2018\n  UIKonf 18Berlin, Germany, 13-16 May 2018\n  ","permalink":"https://examplesite.com/talks/x-things-to-do-before-crypto/","tags":["cryptography","mobile","basic sanity","software engineering","security"],"title":"X Things you Need to Know before Implementing Cryptography"},{"categories":null,"contents":"See about.\n","permalink":"https://examplesite.com/author/anastasiia-vixentael/","tags":null,"title":"Anastasiia Vixentael"}]